------ installation of Eclipse C++ to work with Teensy ---
follow https://trippylighting.com/teensy-arduino-ect/arduino-eclipse-plugin/installation-of-the-arduino-eclipse-ide-teensyduino-win-7/

- Download and install  Arduino IDE 1.8.2 (1.8.3 does not work with teensyduino)
- Download and install Teensyduino 1.36
- download and install Sloeber from http://www.baeyens.it/eclipse/
- in Windows/Preferences/Arduino set  path c:/Programme/Arduino/hardware with ./teensy in it 
- store the latest i2c_t3 v9.1 library in teensy\avr\libraries\i2c_t3

!!! Important: in C:\Program Files (x86)\Arduino\hardware\teensy\avr\cores\teensy3 set  SERIAL1_RX_BUFFER_SIZE = 192 since some commands are longer than the default 64

------ installation of MINGW & MSYS
download mingw-w64-install.exe 
install with:   Version=7.1.0 Architecture=i686, Threads Posix, Exception dwarf
download MSYS by installing mingw (https://sourceforge.net/projects/mingw/files/latest/download) and select to download MSYS only.
set windows system variable MINGW64_HOME to C:\Program Files (x86)\mingw-w64\i686-7.1.0-posix-dwarf-rt_v5-rev0\mingw32

------ installation of Eclipse C++ on Windows
download and install Java Runtime Environment 
download and install "Eclipse IDE for C++ Developers" for Windows 64bit
in Windows/Preferences/C/C++/Environment set
MINGW_HOME=C:\Program Files (x86)\mingw-w64\i686-7.1.0-posix-dwarf-rt_v5-rev0\mingw32
MSYS_HOME=C:\MinGW\msys\1.0\
PATH=%PATH%;%MSYS_HOME%/bin;%MINGW_HOME%/bin
----- installation of POCO
todo

------ installation of Atmel Studio
download and install Atmel Studio 7 web installer from http://studio.download.atmel.com/7.0.1417/as-installer-7.0.1417-web.exe


----- setting up a Ubuntu 16.04 VM  on Windows 10
- In BIOS Settings: Enable virtualizations
- download ubuntu 16.04 64 bit (AMD64) image)Image from http://releases.ubuntu.com/16.04/
- download virtual box from  https://www.virtualbox.org/
- In settings, set path for virtual boxes
- install GuestAdditions to have bidirectional copy/paste
- setup Ubuntu VM according to https://jtreminio.com/2012/07/setting-up-a-debian-vm-step-by-step/
- VirtualBox: Modify/Serial interfaces/ Portnumber COM2 / PortModus Host-Interface / Port Path COM2  (RPLidar)
- VirtualBox: Modify/Serial interfaces/ Portnumber COM1 / PortModus Host-Interface / Port Path COM1  (Cortex)

  Now Windows Serial port COM2 is available in Ubuntu as /dev/ttyS0
  configure Port fowarding in VirtualBox: Network/NAT/Port Forward/
     Rule 1: "roswww" <> 3085 <> 8085
     Rule 2: "pentapod" <> 3000 <> 8000

---- install gitkraken
>sudo apt-get update
>wget https://release.gitkraken.com/linux/gitkraken-amd64.deb
>sudo dpkg -i gitkraken-amd64.deb

--- install ROS
- Install ROS lunar/kinetic according to http://wiki.ros.org/ROS/Installation
>sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
>sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116
>sudo apt-get update
>sudo apt-get install ros-(lunar/kinetic)-ros-base
>sudo apt-get install ros-(lunar/kinetic)-desktop
>sudo apt-get install ros-(lunar/kinetic)-navigation
>sudo rosdep init
>rosdep update
>echo "source /opt/ros/lunar/setup.bash" >> ~/.bashrc
>source ~/.bashrc
>sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential

--- install Eclipse/C++ to be used with ROS
>sudo apt-get install eclipse eclipse-cdt g++
- Map RP Lidar to Com2  (Windows Devicemanager)
  (thanks to https://techtooltip.wordpress.com/2008/09/12/using-host-serial-port-from-guest-in-virtual-box/)
- setting up eclipse with ubuntu in Virtual Box according to (http://wiki.ros.org/IDEs)
  # generate Eclipse Project files in <package>/build
  catkin build  --force-cmake -G"Eclipse CDT4 - Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug
  # import project in eclipse with "import into workspace"
  # To debug in eclipse, select executable. In environment, defined the two variables
  ROS_ROOT and ROS_MASTER_URI according to the value returned by 
  >echo $ROS_ROOT
  >echo $ROS_MASTER_URI 

--- create catkin workspace
>mkdir catkin_ws
>cd catkin_ws
>catkin_init_workspace
>mkdir src

---- installation of ROS/hector slam 
>cd ~/catkin_ws/src
>git clone https://github.com/tu-darmstadt-ros-pkg/hector_slam -b catkin
>git checkout slam
>catkin_make

--- installation of Ceres (used by hector_navigation)
--- (according to http://wiki.ros.org/industrial_extrinsic_cal)
sudo apt-get install libatlas-base-dev libeigen3-dev python-gflags
cd 
wget https://github.com/gflags/gflags/archive/v2.1.2.zip
unzip v2.1.2.zip && rm v2.1.2.zip
cd gflags-2.1.2 && mkdir build && cd build
cmake .. -DBUILD_SHARED_LIBS=ON
make
sudo make install
--- Install glog
cd
wget https://github.com/google/glog/archive/v0.3.4.zip
unzip v0.3.4.zip && rm v0.3.4.zip
cd glog-0.3.4/
./configure --with-gflags=/usr/local/
make
sudo make install
--- Install Ceres
cd
wget https://github.com/ceres-solver/ceres-solver/archive/1.11.0.zip
unzip 1.11.0.zip && rm 1.11.0.zip
cd ceres-solver-1.11.0
mkdir build && cd build
cmake ..
make
sudo make install
--- check if ceres-solver it is running
build/bin/simple_bundle_adjuster ../ceres-solver-1.11.0/data/problem-16-22106-pre.txt 

---- installation of ROS/hector navigation 
---- (according to https://answers.ros.org/question/112576/how-can-i-run-hector-navigation-for-exploration)
>cd ~/catkin_ws/src
---- hector navigation requires geodesy
>git clone https://github.com/rst-tu-dortmund/costmap_converter.git 
>git clone https://github.com/ros-geographic-info/geographic_info
>git clone https://github.com/ros-geographic-info/unique_identifier
>git clone https://github.com/tu-darmstadt-ros-pkg/hector_navigation
>git checkout slam
>catkin_make

--- installation of ROS/RPlidar
>cd ~/catkin_ws/src
>git clone https://github.com/robopeak/rplidar_ros
>catkin_make

---- installation of ROS/navigation package
>sudo apt-get install libbullet-dev 
# not necessary I think: sudo apt-get install libsdl2-dev 
>sudo apt-get install libsdl-dev libsdl-image1.2-dev
>sudo apt-get install ros-lunar-bfl
>cd ~/catkin_ws/src

>git clone https://github.com/ros-planning/navigation -b lunar
>git clone https://github.com/ros-planning/navigation_msgs # required by navigation

-- teb_local_planner
-install g2o according to http://sayantanfoto.blogspot.de/2015/06/installing-g2o-on-ubuntu.html
>cd ~/catkin_ws/src
> sudo apt-get install libamd2.4.1 libbtf1.2.1 libcamd2.4.1 libccolamd2.9.1 libcholmod3.0.6 libcsparse3.1.4 libcxsparse3.1.4 libklu1.3.3 libldl2.2.1 libspqr2.0.2 libsuitesparse-dev libumfpack5.7.1
>git clone https://github.com/rst-tu-dortmund/teb_local_planner.git
>git checkout kinetic_devel

--- patch hector_navigation/hector_gps_calibration/include/hector_gps_calibration/normalize_angle.h 
--- replace ceres:floor by std:floor
>catkin_make


--- ROS release build -O3 without debugging
catkin_make -DCMAKE_BUILD_TYPE=Release
source devel/setup.bash
roslaunch rplidar_ros view_slam.launch
roslaunch rplidar_ros view_rplidar.launch


--- setting up pentapod_engine
# create package
>mkdir ~catkin_workspace
>cd catkin_workspace
>catkin_create_pkg pentapod_engine std_msgs geometry_msgs roscpp



##### running ROS stuff ###

# running the pentapod engine
rosrun pentapod_server pentapod.launch
# starting hector slam tutorial (without pentapod) 
roslaunch hector_slam_launch tutorial.launch 
# reading and playing laser sensor data
rosbag play Team_Hector_MappingBox_RoboCup_2011_Rescue_Arena.bag  --clock
# saving the current map 
rosrun map_server map_saver -f mymap
# loading and exposing a map
rosrun map_server map_server mymap.yaml
# saving a geotiff picture
rostopic pub syscommand std_msgs/String "savegeotiff"
# record laser data and transformation
rosbag record -O mylaserdata /base_scan /tf